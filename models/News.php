<?php

namespace app\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "news".
 *
 * @property integer $id
 * @property string $name
 * @property string $preview_text
 * @property string $full_text
 * @property string $image
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $status
 * @property integer $author
 *
 * @property User $authorModel
 */
class News extends \yii\db\ActiveRecord
{
    public function behaviors()
    {
        return [
            TimestampBehavior::class,
        ];
    }
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'news';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name'], 'required'],
            [['preview_text', 'full_text'], 'string'],
            [['created_at', 'updated_at', 'status', 'author'], 'integer'],
            ['status', 'default', 'value' => 0],
            [['name', 'image'], 'string', 'max' => 255],
            [['author'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['author' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Title',
            'preview_text' => 'Preview Text',
            'full_text' => 'Full Text',
            'image' => 'Image',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'status' => 'Status',
            'author' => 'Author',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthorModel()
    {
        return $this->hasOne(User::className(), ['id' => 'author']);
    }

    /**
     * @inheritdoc
     * @return NewsQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new NewsQuery(get_called_class());
    }

    public function beforeSave($insert)
    {
        $this->author = \Yii::$app->user->id;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @param \app\components\User $user
     * @return bool
     */
    public function canUpdate(\app\components\User $user)
    {
        if ($user->can('admin')) {
            return true;
        } else if ($user->can('manager')) {
            return $user->id === $this->author;
        }
        return false;
    }
}
